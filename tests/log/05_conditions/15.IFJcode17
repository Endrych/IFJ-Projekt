# 2017-11-30 22:56:45.170708
# SECTION: 05_conditions
# TEST: 15
# INFO: Many conditions
# REQUIRED EXTENSIONS: 
# ACTIVATED EXTENSIONS: 
# STATE: SUCCESS
# 
# COMPILER STDERR:
# 
# Everything is OK
# 
# INTERPRETER STDERR:
# Executing instruction: IJUMP at line: 2 with following arguments:
# Executing instruction: ILABEL at line: 118 with following arguments:
# Executing instruction: ICREATEFRAME at line: 119 with following arguments:
# Executing instruction: IPUSHFRAME at line: 120 with following arguments:
# Executing instruction: IDEFVAR at line: 121 with following arguments:
# Dest: LF@a
# Executing instruction: IMOVE at line: 122 with following arguments:
# Arg1: Const@=0(int)
# Dest: LF@a()
# Executing instruction: IDEFVAR at line: 123 with following arguments:
# Dest: LF@&a
# Executing instruction: IMOVE at line: 124 with following arguments:
# Arg1: LF@a=0(int)
# Dest: LF@&a()
# Executing instruction: IPUSHS at line: 125 with following arguments:
# Arg1: LF@&a=0(int)
# Dest: Stack@()
# Executing instruction: IMOVE at line: 126 with following arguments:
# Arg1: Const@=1(int)
# Dest: LF@&a=0(int)
# Executing instruction: IPUSHS at line: 127 with following arguments:
# Arg1: LF@&a=1(int)
# Dest: Stack@()
# Executing instruction: ILSS at line: 128 with following arguments:
# Arg1: Stack@=0(int)
# Arg2: Stack@=1(int)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 129 with following arguments:
# Arg1: Stack@=true(bool)
# Dest: LF@&a=1(int)
# Executing instruction: IJUMPIFNEQ at line: 130 with following arguments:
# Arg1: Const@=true(bool)
# Arg2: LF@&a=true(bool)
# Executing instruction: IDEFVAR at line: 131 with following arguments:
# Dest: LF@&b
# Executing instruction: IMOVE at line: 132 with following arguments:
# Arg1: Const@=OK(string)
# Dest: LF@&b()
# Executing instruction: IWRITE at line: 133 with following arguments:
# Arg1: LF@&b=OK(string)
# Executing instruction: IJUMP at line: 134 with following arguments:
# Executing instruction: ILABEL at line: 139 with following arguments:
# Executing instruction: IDEFVAR at line: 140 with following arguments:
# Dest: LF@&d
# Executing instruction: IMOVE at line: 141 with following arguments:
# Arg1: LF@a=0(int)
# Dest: LF@&d()
# Executing instruction: IPUSHS at line: 142 with following arguments:
# Arg1: LF@&d=0(int)
# Dest: Stack@()
# Executing instruction: IMOVE at line: 143 with following arguments:
# Arg1: Const@=0(int)
# Dest: LF@&d=0(int)
# Executing instruction: IPUSHS at line: 144 with following arguments:
# Arg1: LF@&d=0(int)
# Dest: Stack@()
# Executing instruction: IDEFVAR at line: 145 with following arguments:
# Dest: LF@&e
# Executing instruction: IDEFVAR at line: 146 with following arguments:
# Dest: LF@&f
# Executing instruction: IPOPS at line: 147 with following arguments:
# Arg1: Stack@=0(int)
# Dest: LF@&e()
# Executing instruction: IPOPS at line: 148 with following arguments:
# Arg1: Stack@=0(int)
# Dest: LF@&f()
# Executing instruction: IPUSHS at line: 149 with following arguments:
# Arg1: LF@&f=0(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 150 with following arguments:
# Arg1: LF@&e=0(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 151 with following arguments:
# Arg1: LF@&f=0(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 152 with following arguments:
# Arg1: LF@&e=0(int)
# Dest: Stack@()
# Executing instruction: ILSS at line: 153 with following arguments:
# Arg1: Stack@=0(int)
# Arg2: Stack@=0(int)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 154 with following arguments:
# Arg1: Stack@=false(bool)
# Dest: LF@&e=0(int)
# Executing instruction: IEQS at line: 155 with following arguments:
# Arg1: Stack@=0(int)
# Arg2: Stack@=0(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 156 with following arguments:
# Arg1: LF@&e=false(bool)
# Dest: Stack@()
# Executing instruction: IORS at line: 157 with following arguments:
# Arg1: Stack@=true(bool)
# Arg2: Stack@=false(bool)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 158 with following arguments:
# Arg1: Stack@=true(bool)
# Dest: LF@&d=0(int)
# Executing instruction: IJUMPIFNEQ at line: 159 with following arguments:
# Arg1: Const@=true(bool)
# Arg2: LF@&d=true(bool)
# Executing instruction: IDEFVAR at line: 160 with following arguments:
# Dest: LF@&g
# Executing instruction: IMOVE at line: 161 with following arguments:
# Arg1: Const@=OK(string)
# Dest: LF@&g()
# Executing instruction: IWRITE at line: 162 with following arguments:
# Arg1: LF@&g=OK(string)
# Executing instruction: IJUMP at line: 163 with following arguments:
# Executing instruction: ILABEL at line: 168 with following arguments:
# Executing instruction: IDEFVAR at line: 169 with following arguments:
# Dest: LF@&i
# Executing instruction: IMOVE at line: 170 with following arguments:
# Arg1: LF@a=0(int)
# Dest: LF@&i()
# Executing instruction: IPUSHS at line: 171 with following arguments:
# Arg1: LF@&i=0(int)
# Dest: Stack@()
# Executing instruction: IMOVE at line: 172 with following arguments:
# Arg1: Const@=0(int)
# Dest: LF@&i=0(int)
# Executing instruction: IPUSHS at line: 173 with following arguments:
# Arg1: LF@&i=0(int)
# Dest: Stack@()
# Executing instruction: IDEFVAR at line: 174 with following arguments:
# Dest: LF@&j
# Executing instruction: IDEFVAR at line: 175 with following arguments:
# Dest: LF@&k
# Executing instruction: IPOPS at line: 176 with following arguments:
# Arg1: Stack@=0(int)
# Dest: LF@&j()
# Executing instruction: IPOPS at line: 177 with following arguments:
# Arg1: Stack@=0(int)
# Dest: LF@&k()
# Executing instruction: IPUSHS at line: 178 with following arguments:
# Arg1: LF@&k=0(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 179 with following arguments:
# Arg1: LF@&j=0(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 180 with following arguments:
# Arg1: LF@&k=0(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 181 with following arguments:
# Arg1: LF@&j=0(int)
# Dest: Stack@()
# Executing instruction: IGTS at line: 182 with following arguments:
# Arg1: Stack@=0(int)
# Arg2: Stack@=0(int)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 183 with following arguments:
# Arg1: Stack@=false(bool)
# Dest: LF@&j=0(int)
# Executing instruction: IEQS at line: 184 with following arguments:
# Arg1: Stack@=0(int)
# Arg2: Stack@=0(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 185 with following arguments:
# Arg1: LF@&j=false(bool)
# Dest: Stack@()
# Executing instruction: IORS at line: 186 with following arguments:
# Arg1: Stack@=true(bool)
# Arg2: Stack@=false(bool)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 187 with following arguments:
# Arg1: Stack@=true(bool)
# Dest: LF@&i=0(int)
# Executing instruction: IJUMPIFNEQ at line: 188 with following arguments:
# Arg1: Const@=true(bool)
# Arg2: LF@&i=true(bool)
# Executing instruction: IDEFVAR at line: 189 with following arguments:
# Dest: LF@&l
# Executing instruction: IMOVE at line: 190 with following arguments:
# Arg1: Const@=OK(string)
# Dest: LF@&l()
# Executing instruction: IWRITE at line: 191 with following arguments:
# Arg1: LF@&l=OK(string)
# Executing instruction: IJUMP at line: 192 with following arguments:
# Executing instruction: ILABEL at line: 197 with following arguments:
# Executing instruction: IDEFVAR at line: 198 with following arguments:
# Dest: LF@&n
# Executing instruction: IMOVE at line: 199 with following arguments:
# Arg1: LF@a=0(int)
# Dest: LF@&n()
# Executing instruction: IPUSHS at line: 200 with following arguments:
# Arg1: LF@&n=0(int)
# Dest: Stack@()
# Executing instruction: IMOVE at line: 201 with following arguments:
# Arg1: Const@=0(int)
# Dest: LF@&n=0(int)
# Executing instruction: IPUSHS at line: 202 with following arguments:
# Arg1: LF@&n=0(int)
# Dest: Stack@()
# Executing instruction: IMOVE at line: 203 with following arguments:
# Arg1: Const@=1(int)
# Dest: LF@&n=0(int)
# Executing instruction: IPUSHS at line: 204 with following arguments:
# Arg1: LF@&n=1(int)
# Dest: Stack@()
# Executing instruction: ISUBS at line: 205 with following arguments:
# Arg1: Stack@=0(int)
# Arg2: Stack@=1(int)
# Dest: Stack@()
# Executing instruction: IDEFVAR at line: 206 with following arguments:
# Dest: LF@&o
# Executing instruction: IDEFVAR at line: 207 with following arguments:
# Dest: LF@&p
# Executing instruction: IPOPS at line: 208 with following arguments:
# Arg1: Stack@=-1(int)
# Dest: LF@&o()
# Executing instruction: IPOPS at line: 209 with following arguments:
# Arg1: Stack@=0(int)
# Dest: LF@&p()
# Executing instruction: IPUSHS at line: 210 with following arguments:
# Arg1: LF@&p=0(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 211 with following arguments:
# Arg1: LF@&o=-1(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 212 with following arguments:
# Arg1: LF@&p=0(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 213 with following arguments:
# Arg1: LF@&o=-1(int)
# Dest: Stack@()
# Executing instruction: IGTS at line: 214 with following arguments:
# Arg1: Stack@=0(int)
# Arg2: Stack@=-1(int)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 215 with following arguments:
# Arg1: Stack@=true(bool)
# Dest: LF@&o=-1(int)
# Executing instruction: IEQS at line: 216 with following arguments:
# Arg1: Stack@=0(int)
# Arg2: Stack@=-1(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 217 with following arguments:
# Arg1: LF@&o=true(bool)
# Dest: Stack@()
# Executing instruction: IORS at line: 218 with following arguments:
# Arg1: Stack@=false(bool)
# Arg2: Stack@=true(bool)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 219 with following arguments:
# Arg1: Stack@=true(bool)
# Dest: LF@&n=1(int)
# Executing instruction: IJUMPIFNEQ at line: 220 with following arguments:
# Arg1: Const@=true(bool)
# Arg2: LF@&n=true(bool)
# Executing instruction: IDEFVAR at line: 221 with following arguments:
# Dest: LF@&q
# Executing instruction: IMOVE at line: 222 with following arguments:
# Arg1: Const@=OK(string)
# Dest: LF@&q()
# Executing instruction: IWRITE at line: 223 with following arguments:
# Arg1: LF@&q=OK(string)
# Executing instruction: IJUMP at line: 224 with following arguments:
# Executing instruction: ILABEL at line: 229 with following arguments:
# Executing instruction: IDEFVAR at line: 230 with following arguments:
# Dest: LF@&s
# Executing instruction: IMOVE at line: 231 with following arguments:
# Arg1: LF@a=0(int)
# Dest: LF@&s()
# Executing instruction: IPUSHS at line: 232 with following arguments:
# Arg1: LF@&s=0(int)
# Dest: Stack@()
# Executing instruction: IMOVE at line: 233 with following arguments:
# Arg1: Const@=0(int)
# Dest: LF@&s=0(int)
# Executing instruction: IPUSHS at line: 234 with following arguments:
# Arg1: LF@&s=0(int)
# Dest: Stack@()
# Executing instruction: IGTS at line: 235 with following arguments:
# Arg1: Stack@=0(int)
# Arg2: Stack@=0(int)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 236 with following arguments:
# Arg1: Stack@=false(bool)
# Dest: LF@&s=0(int)
# Executing instruction: IJUMPIFNEQ at line: 237 with following arguments:
# Arg1: Const@=true(bool)
# Arg2: LF@&s=false(bool)
# Executing instruction: ILABEL at line: 242 with following arguments:
# Executing instruction: IDEFVAR at line: 243 with following arguments:
# Dest: LF@&u
# Executing instruction: IMOVE at line: 244 with following arguments:
# Arg1: Const@=NOTOK(string)
# Dest: LF@&u()
# Executing instruction: IWRITE at line: 245 with following arguments:
# Arg1: LF@&u=NOTOK(string)
# Executing instruction: ILABEL at line: 246 with following arguments:
# Executing instruction: IDEFVAR at line: 247 with following arguments:
# Dest: LF@&v
# Executing instruction: IMOVE at line: 248 with following arguments:
# Arg1: LF@a=0(int)
# Dest: LF@&v()
# Executing instruction: IPUSHS at line: 249 with following arguments:
# Arg1: LF@&v=0(int)
# Dest: Stack@()
# Executing instruction: IMOVE at line: 250 with following arguments:
# Arg1: Const@=0(int)
# Dest: LF@&v=0(int)
# Executing instruction: IPUSHS at line: 251 with following arguments:
# Arg1: LF@&v=0(int)
# Dest: Stack@()
# Executing instruction: IEQS at line: 252 with following arguments:
# Arg1: Stack@=0(int)
# Arg2: Stack@=0(int)
# Dest: Stack@()
# Executing instruction: INOTS at line: 253 with following arguments:
# Arg1: Stack@=true(bool)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 254 with following arguments:
# Arg1: Stack@=false(bool)
# Dest: LF@&v=0(int)
# Executing instruction: IJUMPIFNEQ at line: 255 with following arguments:
# Arg1: Const@=true(bool)
# Arg2: LF@&v=false(bool)
# Executing instruction: ILABEL at line: 260 with following arguments:
# Executing instruction: IDEFVAR at line: 261 with following arguments:
# Dest: LF@&x
# Executing instruction: IMOVE at line: 262 with following arguments:
# Arg1: Const@=NOTOK(string)
# Dest: LF@&x()
# Executing instruction: IWRITE at line: 263 with following arguments:
# Arg1: LF@&x=NOTOK(string)
# Executing instruction: ILABEL at line: 264 with following arguments:
# Executing instruction: IDEFVAR at line: 265 with following arguments:
# Dest: LF@&y
# Executing instruction: IMOVE at line: 266 with following arguments:
# Arg1: LF@a=0(int)
# Dest: LF@&y()
# Executing instruction: IPUSHS at line: 267 with following arguments:
# Arg1: LF@&y=0(int)
# Dest: Stack@()
# Executing instruction: IMOVE at line: 268 with following arguments:
# Arg1: Const@=1(int)
# Dest: LF@&y=0(int)
# Executing instruction: IPUSHS at line: 269 with following arguments:
# Arg1: LF@&y=1(int)
# Dest: Stack@()
# Executing instruction: IEQS at line: 270 with following arguments:
# Arg1: Stack@=0(int)
# Arg2: Stack@=1(int)
# Dest: Stack@()
# Executing instruction: INOTS at line: 271 with following arguments:
# Arg1: Stack@=false(bool)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 272 with following arguments:
# Arg1: Stack@=true(bool)
# Dest: LF@&y=1(int)
# Executing instruction: IJUMPIFNEQ at line: 273 with following arguments:
# Arg1: Const@=true(bool)
# Arg2: LF@&y=true(bool)
# Executing instruction: IDEFVAR at line: 274 with following arguments:
# Dest: LF@&z
# Executing instruction: IMOVE at line: 275 with following arguments:
# Arg1: Const@=OK(string)
# Dest: LF@&z()
# Executing instruction: IWRITE at line: 276 with following arguments:
# Arg1: LF@&z=OK(string)
# Executing instruction: IJUMP at line: 277 with following arguments:
# Executing instruction: ILABEL at line: 282 with following arguments:
# Executing instruction: IDEFVAR at line: 283 with following arguments:
# Dest: LF@&B
# Executing instruction: IMOVE at line: 284 with following arguments:
# Arg1: LF@a=0(int)
# Dest: LF@&B()
# Executing instruction: IPUSHS at line: 285 with following arguments:
# Arg1: LF@&B=0(int)
# Dest: Stack@()
# Executing instruction: IMOVE at line: 286 with following arguments:
# Arg1: Const@=1(int)
# Dest: LF@&B=0(int)
# Executing instruction: IPUSHS at line: 287 with following arguments:
# Arg1: LF@&B=1(int)
# Dest: Stack@()
# Executing instruction: IEQS at line: 288 with following arguments:
# Arg1: Stack@=0(int)
# Arg2: Stack@=1(int)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 289 with following arguments:
# Arg1: Stack@=false(bool)
# Dest: LF@&B=1(int)
# Executing instruction: IJUMPIFNEQ at line: 290 with following arguments:
# Arg1: Const@=true(bool)
# Arg2: LF@&B=false(bool)
# Executing instruction: ILABEL at line: 295 with following arguments:
# Executing instruction: IDEFVAR at line: 296 with following arguments:
# Dest: LF@&D
# Executing instruction: IMOVE at line: 297 with following arguments:
# Arg1: Const@=NOTOK(string)
# Dest: LF@&D()
# Executing instruction: IWRITE at line: 298 with following arguments:
# Arg1: LF@&D=NOTOK(string)
# Executing instruction: ILABEL at line: 299 with following arguments:
# Executing instruction: IDEFVAR at line: 300 with following arguments:
# Dest: LF@&E
# Executing instruction: IMOVE at line: 301 with following arguments:
# Arg1: LF@a=0(int)
# Dest: LF@&E()
# Executing instruction: IPUSHS at line: 302 with following arguments:
# Arg1: LF@&E=0(int)
# Dest: Stack@()
# Executing instruction: IMOVE at line: 303 with following arguments:
# Arg1: Const@=0(int)
# Dest: LF@&E=0(int)
# Executing instruction: IPUSHS at line: 304 with following arguments:
# Arg1: LF@&E=0(int)
# Dest: Stack@()
# Executing instruction: IEQS at line: 305 with following arguments:
# Arg1: Stack@=0(int)
# Arg2: Stack@=0(int)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 306 with following arguments:
# Arg1: Stack@=true(bool)
# Dest: LF@&E=0(int)
# Executing instruction: IJUMPIFNEQ at line: 307 with following arguments:
# Arg1: Const@=true(bool)
# Arg2: LF@&E=true(bool)
# Executing instruction: IDEFVAR at line: 308 with following arguments:
# Dest: LF@&F
# Executing instruction: IMOVE at line: 309 with following arguments:
# Arg1: Const@=OK(string)
# Dest: LF@&F()
# Executing instruction: IWRITE at line: 310 with following arguments:
# Arg1: LF@&F=OK(string)
# Executing instruction: IJUMP at line: 311 with following arguments:
# Executing instruction: ILABEL at line: 316 with following arguments:
# Executing instruction: IPOPFRAME at line: 317 with following arguments:
# Executing instruction: IGROOT at line: 319 with following arguments:
# I am Groot at 319 (1003).
# 
# STDOUT DIFF:
# 

# INTERPRETER STDIN: 
# 
#
# EXPECTED COMPILER EXIT CODE: 0
# CURRENT COMPILER EXIT CODE: 0
# EXPECTED INTERPRETER EXIT CODE: 0
# CURRENT INTERPRETER EXIT CODE: 0
# PRICE: 1003 (234+769)
# GROOT: 1003
# 
#   1: ' Many conditions
#   2: 
#   3: scope
#   4: 
#   5: dim a as integer
#   6: 
#   7: if a < 1 then
#   8:     print !"OK";
#   9: else
#  10:     print !"NOTOK";
#  11: end if
#  12: 
#  13: if a <= 0 then
#  14:     print !"OK";
#  15: else
#  16:     print !"NOTOK";
#  17: end if
#  18: 
#  19: if a >= 0 then
#  20:     print !"OK";
#  21: else
#  22:     print !"NOTOK";
#  23: end if
#  24: 
#  25: if a >= 0-1 then
#  26:     print !"OK";
#  27: else
#  28:     print !"NOTOK";
#  29: end if
#  30: 
#  31: if a > 0 then
#  32:     print !"OK";
#  33: else
#  34:     print !"NOTOK";
#  35: end if
#  36: 
#  37: if a <> 0 then
#  38:     print !"OK";
#  39: else
#  40:     print !"NOTOK";
#  41: end if
#  42: 
#  43: if a <> 1 then
#  44:     print !"OK";
#  45: else
#  46:     print !"NOTOK";
#  47: end if
#  48: 
#  49: if a = 1 then
#  50:     print !"OK";
#  51: else
#  52:     print !"NOTOK";
#  53: end if
#  54: 
#  55: if a = 0 then
#  56:     print !"OK";
#  57: else
#  58:     print !"NOTOK";
#  59: end if
#  60: 
#  61: end scope

########################################

.IFJcode17                                                                      #     1/317
JUMP $$main                                                                     #     2/317
LABEL $length                                                                   #     3/317
PUSHFRAME                                                                       #     4/317
DEFVAR LF@%retval                                                               #     5/317
MOVE LF@%retval int@0                                                           #     6/317
STRLEN LF@%retval LF@s                                                          #     7/317
LABEL $length$epilog                                                            #     8/317
POPFRAME                                                                        #     9/317
RETURN                                                                          #    10/317
LABEL $substr                                                                   #    11/317
PUSHFRAME                                                                       #    12/317
DEFVAR LF@%retval                                                               #    13/317
MOVE LF@%retval string@                                                         #    14/317
DEFVAR LF@tmp1                                                                  #    15/317
DEFVAR LF@tmp2                                                                  #    16/317
MOVE LF@tmp1 int@0                                                              #    17/317
MOVE LF@tmp2 string@                                                            #    18/317
SUB LF@tmp1 LF@i int@1                                                          #    19/317
DEFVAR LF@length                                                                #    20/317
MOVE LF@length int@0                                                            #    21/317
DEFVAR LF@result                                                                #    22/317
MOVE LF@result bool@false                                                       #    23/317
DEFVAR LF@tmplen                                                                #    24/317
MOVE LF@tmplen int@0                                                            #    25/317
STRLEN LF@tmplen LF@s                                                           #    26/317
SUB LF@tmplen LF@tmplen LF@i                                                    #    27/317
ADD LF@tmplen LF@tmplen int@1                                                   #    28/317
JUMPIFEQ $SubStrReturn0 LF@s LF@tmp2                                            #    29/317
PUSHS LF@i                                                                      #    30/317
PUSHS int@0                                                                     #    31/317
PUSHS LF@i                                                                      #    32/317
PUSHS int@0                                                                     #    33/317
EQS                                                                             #    34/317
POPS LF@result                                                                  #    35/317
LTS                                                                             #    36/317
PUSHS LF@result                                                                 #    37/317
ORS                                                                             #    38/317
POPS LF@result                                                                  #    39/317
JUMPIFEQ $SubStrReturn0 bool@true LF@result                                     #    40/317
PUSHS LF@n                                                                      #    41/317
PUSHS int@0                                                                     #    42/317
LTS                                                                             #    43/317
POPS LF@result                                                                  #    44/317
JUMPIFEQ $SubStrReturnRest bool@true LF@result                                  #    45/317
STRLEN LF@tmplen LF@s                                                           #    46/317
SUB LF@tmplen LF@tmplen LF@i                                                    #    47/317
ADD LF@tmplen LF@tmplen int@1                                                   #    48/317
PUSHS LF@tmplen                                                                 #    49/317
PUSHS LF@n                                                                      #    50/317
LTS                                                                             #    51/317
POPS LF@result                                                                  #    52/317
JUMPIFEQ $SubStrReturnRest bool@true LF@result                                  #    53/317
MOVE LF@tmplen int@0                                                            #    54/317
STRLEN LF@tmplen LF@s                                                           #    55/317
SUB LF@tmplen LF@tmplen LF@i                                                    #    56/317
LABEL $SubStrFor                                                                #    57/317
GETCHAR LF@tmp2 LF@s LF@tmp1                                                    #    58/317
CONCAT LF@%retval LF@%retval LF@tmp2                                            #    59/317
ADD LF@tmp1 LF@tmp1 int@1                                                       #    60/317
STRLEN LF@length LF@%retval                                                     #    61/317
JUMPIFNEQ $SubStrFor LF@length LF@n                                             #    62/317
JUMP $substr$epilog                                                             #    63/317
LABEL $SubStrReturn0                                                            #    64/317
MOVE LF@%retval string@                                                         #    65/317
JUMP $substr$epilog                                                             #    66/317
LABEL $SubStrReturnRest                                                         #    67/317
GETCHAR LF@tmp2 LF@s LF@tmp1                                                    #    68/317
CONCAT LF@%retval LF@%retval LF@tmp2                                            #    69/317
ADD LF@tmp1 LF@tmp1 int@1                                                       #    70/317
STRLEN LF@length LF@%retval                                                     #    71/317
JUMPIFNEQ $SubStrReturnRest LF@tmplen LF@length                                 #    72/317
LABEL $substr$epilog                                                            #    73/317
POPFRAME                                                                        #    74/317
RETURN                                                                          #    75/317
LABEL $asc                                                                      #    76/317
PUSHFRAME                                                                       #    77/317
DEFVAR LF@%retval                                                               #    78/317
MOVE LF@%retval int@0                                                           #    79/317
DEFVAR LF@result                                                                #    80/317
MOVE LF@result bool@false                                                       #    81/317
DEFVAR LF@tmp                                                                   #    82/317
DEFVAR LF@tmp2                                                                  #    83/317
MOVE LF@tmp string@                                                             #    84/317
MOVE LF@tmp2 int@0                                                              #    85/317
PUSHS LF@i                                                                      #    86/317
PUSHS int@0                                                                     #    87/317
PUSHS LF@i                                                                      #    88/317
PUSHS int@0                                                                     #    89/317
EQS                                                                             #    90/317
POPS LF@result                                                                  #    91/317
LTS                                                                             #    92/317
PUSHS LF@result                                                                 #    93/317
ORS                                                                             #    94/317
POPS LF@result                                                                  #    95/317
JUMPIFEQ $asc$epilog bool@true LF@result                                        #    96/317
PUSHS LF@i                                                                      #    97/317
STRLEN LF@tmp2 LF@s                                                             #    98/317
PUSHS LF@tmp2                                                                   #    99/317
GTS                                                                             #   100/317
POPS LF@result                                                                  #   101/317
JUMPIFEQ $asc$epilog bool@true LF@result                                        #   102/317
SUB LF@i LF@i int@1                                                             #   103/317
GETCHAR LF@tmp LF@s LF@i                                                        #   104/317
STRI2INT LF@%retval LF@tmp int@0                                                #   105/317
LABEL $asc$epilog                                                               #   106/317
POPFRAME                                                                        #   107/317
RETURN                                                                          #   108/317
LABEL $chr                                                                      #   109/317
PUSHFRAME                                                                       #   110/317
DEFVAR LF@%retval                                                               #   111/317
MOVE LF@%retval string@                                                         #   112/317
DEFVAR LF@tmp                                                                   #   113/317
MOVE LF@tmp string@                                                             #   114/317
INT2CHAR LF@%retval LF@i                                                        #   115/317
POPFRAME                                                                        #   116/317
RETURN                                                                          #   117/317
LABEL $$main                                                                    #   118/317
CREATEFRAME                                                                     #   119/317
PUSHFRAME                                                                       #   120/317
DEFVAR LF@a                                                                     #   121/317
MOVE LF@a int@0                                                                 #   122/317
DEFVAR LF@&a                                                                    #   123/317
MOVE LF@&a LF@a                                                                 #   124/317
PUSHS LF@&a                                                                     #   125/317
MOVE LF@&a int@1                                                                #   126/317
PUSHS LF@&a                                                                     #   127/317
LTS                                                                             #   128/317
POPS LF@&a                                                                      #   129/317
JUMPIFNEQ $a bool@true LF@&a                                                    #   130/317
DEFVAR LF@&b                                                                    #   131/317
MOVE LF@&b string@OK                                                            #   132/317
WRITE LF@&b                                                                     #   133/317
JUMP $b                                                                         #   134/317
LABEL $a                                                                        #   135/317
DEFVAR LF@&c                                                                    #   136/317
MOVE LF@&c string@NOTOK                                                         #   137/317
WRITE LF@&c                                                                     #   138/317
LABEL $b                                                                        #   139/317
DEFVAR LF@&d                                                                    #   140/317
MOVE LF@&d LF@a                                                                 #   141/317
PUSHS LF@&d                                                                     #   142/317
MOVE LF@&d int@0                                                                #   143/317
PUSHS LF@&d                                                                     #   144/317
DEFVAR LF@&e                                                                    #   145/317
DEFVAR LF@&f                                                                    #   146/317
POPS LF@&e                                                                      #   147/317
POPS LF@&f                                                                      #   148/317
PUSHS LF@&f                                                                     #   149/317
PUSHS LF@&e                                                                     #   150/317
PUSHS LF@&f                                                                     #   151/317
PUSHS LF@&e                                                                     #   152/317
LTS                                                                             #   153/317
POPS LF@&e                                                                      #   154/317
EQS                                                                             #   155/317
PUSHS LF@&e                                                                     #   156/317
ORS                                                                             #   157/317
POPS LF@&d                                                                      #   158/317
JUMPIFNEQ $c bool@true LF@&d                                                    #   159/317
DEFVAR LF@&g                                                                    #   160/317
MOVE LF@&g string@OK                                                            #   161/317
WRITE LF@&g                                                                     #   162/317
JUMP $d                                                                         #   163/317
LABEL $c                                                                        #   164/317
DEFVAR LF@&h                                                                    #   165/317
MOVE LF@&h string@NOTOK                                                         #   166/317
WRITE LF@&h                                                                     #   167/317
LABEL $d                                                                        #   168/317
DEFVAR LF@&i                                                                    #   169/317
MOVE LF@&i LF@a                                                                 #   170/317
PUSHS LF@&i                                                                     #   171/317
MOVE LF@&i int@0                                                                #   172/317
PUSHS LF@&i                                                                     #   173/317
DEFVAR LF@&j                                                                    #   174/317
DEFVAR LF@&k                                                                    #   175/317
POPS LF@&j                                                                      #   176/317
POPS LF@&k                                                                      #   177/317
PUSHS LF@&k                                                                     #   178/317
PUSHS LF@&j                                                                     #   179/317
PUSHS LF@&k                                                                     #   180/317
PUSHS LF@&j                                                                     #   181/317
GTS                                                                             #   182/317
POPS LF@&j                                                                      #   183/317
EQS                                                                             #   184/317
PUSHS LF@&j                                                                     #   185/317
ORS                                                                             #   186/317
POPS LF@&i                                                                      #   187/317
JUMPIFNEQ $e bool@true LF@&i                                                    #   188/317
DEFVAR LF@&l                                                                    #   189/317
MOVE LF@&l string@OK                                                            #   190/317
WRITE LF@&l                                                                     #   191/317
JUMP $f                                                                         #   192/317
LABEL $e                                                                        #   193/317
DEFVAR LF@&m                                                                    #   194/317
MOVE LF@&m string@NOTOK                                                         #   195/317
WRITE LF@&m                                                                     #   196/317
LABEL $f                                                                        #   197/317
DEFVAR LF@&n                                                                    #   198/317
MOVE LF@&n LF@a                                                                 #   199/317
PUSHS LF@&n                                                                     #   200/317
MOVE LF@&n int@0                                                                #   201/317
PUSHS LF@&n                                                                     #   202/317
MOVE LF@&n int@1                                                                #   203/317
PUSHS LF@&n                                                                     #   204/317
SUBS                                                                            #   205/317
DEFVAR LF@&o                                                                    #   206/317
DEFVAR LF@&p                                                                    #   207/317
POPS LF@&o                                                                      #   208/317
POPS LF@&p                                                                      #   209/317
PUSHS LF@&p                                                                     #   210/317
PUSHS LF@&o                                                                     #   211/317
PUSHS LF@&p                                                                     #   212/317
PUSHS LF@&o                                                                     #   213/317
GTS                                                                             #   214/317
POPS LF@&o                                                                      #   215/317
EQS                                                                             #   216/317
PUSHS LF@&o                                                                     #   217/317
ORS                                                                             #   218/317
POPS LF@&n                                                                      #   219/317
JUMPIFNEQ $g bool@true LF@&n                                                    #   220/317
DEFVAR LF@&q                                                                    #   221/317
MOVE LF@&q string@OK                                                            #   222/317
WRITE LF@&q                                                                     #   223/317
JUMP $h                                                                         #   224/317
LABEL $g                                                                        #   225/317
DEFVAR LF@&r                                                                    #   226/317
MOVE LF@&r string@NOTOK                                                         #   227/317
WRITE LF@&r                                                                     #   228/317
LABEL $h                                                                        #   229/317
DEFVAR LF@&s                                                                    #   230/317
MOVE LF@&s LF@a                                                                 #   231/317
PUSHS LF@&s                                                                     #   232/317
MOVE LF@&s int@0                                                                #   233/317
PUSHS LF@&s                                                                     #   234/317
GTS                                                                             #   235/317
POPS LF@&s                                                                      #   236/317
JUMPIFNEQ $i bool@true LF@&s                                                    #   237/317
DEFVAR LF@&t                                                                    #   238/317
MOVE LF@&t string@OK                                                            #   239/317
WRITE LF@&t                                                                     #   240/317
JUMP $j                                                                         #   241/317
LABEL $i                                                                        #   242/317
DEFVAR LF@&u                                                                    #   243/317
MOVE LF@&u string@NOTOK                                                         #   244/317
WRITE LF@&u                                                                     #   245/317
LABEL $j                                                                        #   246/317
DEFVAR LF@&v                                                                    #   247/317
MOVE LF@&v LF@a                                                                 #   248/317
PUSHS LF@&v                                                                     #   249/317
MOVE LF@&v int@0                                                                #   250/317
PUSHS LF@&v                                                                     #   251/317
EQS                                                                             #   252/317
NOTS                                                                            #   253/317
POPS LF@&v                                                                      #   254/317
JUMPIFNEQ $k bool@true LF@&v                                                    #   255/317
DEFVAR LF@&w                                                                    #   256/317
MOVE LF@&w string@OK                                                            #   257/317
WRITE LF@&w                                                                     #   258/317
JUMP $l                                                                         #   259/317
LABEL $k                                                                        #   260/317
DEFVAR LF@&x                                                                    #   261/317
MOVE LF@&x string@NOTOK                                                         #   262/317
WRITE LF@&x                                                                     #   263/317
LABEL $l                                                                        #   264/317
DEFVAR LF@&y                                                                    #   265/317
MOVE LF@&y LF@a                                                                 #   266/317
PUSHS LF@&y                                                                     #   267/317
MOVE LF@&y int@1                                                                #   268/317
PUSHS LF@&y                                                                     #   269/317
EQS                                                                             #   270/317
NOTS                                                                            #   271/317
POPS LF@&y                                                                      #   272/317
JUMPIFNEQ $m bool@true LF@&y                                                    #   273/317
DEFVAR LF@&z                                                                    #   274/317
MOVE LF@&z string@OK                                                            #   275/317
WRITE LF@&z                                                                     #   276/317
JUMP $n                                                                         #   277/317
LABEL $m                                                                        #   278/317
DEFVAR LF@&A                                                                    #   279/317
MOVE LF@&A string@NOTOK                                                         #   280/317
WRITE LF@&A                                                                     #   281/317
LABEL $n                                                                        #   282/317
DEFVAR LF@&B                                                                    #   283/317
MOVE LF@&B LF@a                                                                 #   284/317
PUSHS LF@&B                                                                     #   285/317
MOVE LF@&B int@1                                                                #   286/317
PUSHS LF@&B                                                                     #   287/317
EQS                                                                             #   288/317
POPS LF@&B                                                                      #   289/317
JUMPIFNEQ $o bool@true LF@&B                                                    #   290/317
DEFVAR LF@&C                                                                    #   291/317
MOVE LF@&C string@OK                                                            #   292/317
WRITE LF@&C                                                                     #   293/317
JUMP $p                                                                         #   294/317
LABEL $o                                                                        #   295/317
DEFVAR LF@&D                                                                    #   296/317
MOVE LF@&D string@NOTOK                                                         #   297/317
WRITE LF@&D                                                                     #   298/317
LABEL $p                                                                        #   299/317
DEFVAR LF@&E                                                                    #   300/317
MOVE LF@&E LF@a                                                                 #   301/317
PUSHS LF@&E                                                                     #   302/317
MOVE LF@&E int@0                                                                #   303/317
PUSHS LF@&E                                                                     #   304/317
EQS                                                                             #   305/317
POPS LF@&E                                                                      #   306/317
JUMPIFNEQ $q bool@true LF@&E                                                    #   307/317
DEFVAR LF@&F                                                                    #   308/317
MOVE LF@&F string@OK                                                            #   309/317
WRITE LF@&F                                                                     #   310/317
JUMP $r                                                                         #   311/317
LABEL $q                                                                        #   312/317
DEFVAR LF@&G                                                                    #   313/317
MOVE LF@&G string@NOTOK                                                         #   314/317
WRITE LF@&G                                                                     #   315/317
LABEL $r                                                                        #   316/317
POPFRAME                                                                        #   317/317

